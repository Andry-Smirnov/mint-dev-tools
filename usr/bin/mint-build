#!/usr/bin/python3

import sys
import os
import argparse

def call(command):
    return_code = os.system(command)
    if return_code != 0:
        print("ERROR: '%s' exited with return code %d" % (command, return_code))
        sys.exit(1)

def install():
    print("")
    print("   #######################################################################")
    print("   ### Installing")
    print("   #######################################################################")
    print("")
    call("sudo apt install --yes --allow-downgrades ../*.deb || sudo dpkg -i ../*.deb")

def build():
    print("")
    print("   #######################################################################")
    print("   ### Downloading build dependencies")
    print("   #######################################################################")
    print("")
    call("sudo DEBIAN_FRONTEND=noninteractive mk-build-deps -i -r -t 'apt-get -y' debian/control")
    print("")

    print("")
    print("   #######################################################################")
    print("   ### Building")
    print("   #######################################################################")
    print("")
    call("dpkg-buildpackage -us -uc")

parser = argparse.ArgumentParser(description='Build project')
parser.add_argument("-i", "--install", action="store_true", help="Install built packages")
parser.add_argument('project', nargs='?', default=None, help="A Linux Mint github project name (if not specified, the build occurs in the current directory)")
args = parser.parse_args()

cwd = os.getcwd()

if args.project is not None:
    project = sys.argv[1]
    call("mkdir -p %s" % project)
    os.chdir(project)
    print("")
    print("   #######################################################################")
    print("   ### Cloning %s" % project)
    print("   #######################################################################")
    print("")
    call("git clone https://github.com/linuxmint/%s.git" % project)
    os.chdir(project)

if os.path.exists('debian'):
    build()
    if args.install:
        install()
else:
    for subdirectory in os.listdir("."):
        if os.path.isdir(subdirectory) and os.path.exists(os.path.join(subdirectory, "debian")):
            os.chdir(subdirectory)
            build()
            if args.install:
                install()
            os.chdir("..")

os.chdir(cwd)